import { v4 as uuidv4 } from 'uuid';
import { MemorySaver, Command, InMemoryStore } from '@langchain/langgraph';
import { z } from 'zod';
/**
 * Global variables mirroring Python for module name and imported module
 */
export let AGENT_MODULE = "";
export const setAgentModule = (moduleName) => {
    AGENT_MODULE = moduleName;
};
/**
 * Create thread configuration for tests
 */
export function createThreadConfig() {
    return { configurable: { thread_id: uuidv4() } };
}
/**
 * Setup assistant for testing
 * Mirrors the Python setup_assistant function
 */
export async function setupAssistant() {
    // Set up checkpointer and store
    const checkpointer = new MemorySaver();
    const store = new InMemoryStore();
    // Create a thread ID and config
    const threadConfig = createThreadConfig();
    // Import the specified module dynamically
    const module = await import(`../../scripts/${AGENT_MODULE}`);
    // Compile the graph based on module type
    let emailAssistant;
    if (AGENT_MODULE === "email_assistant_hitl_memory") {
        // Memory implementation needs a store and a checkpointer
        emailAssistant = await module.createHitlEmailAssistantWithMemory();
    }
    else if (AGENT_MODULE === "email_assistant_hitl") {
        // Just use a checkpointer for HITL version
        emailAssistant = await module.createHitlEmailAssistant();
    }
    else {
        // Just use a checkpointer for other versions
        emailAssistant = await module.createEmailAssistant();
    }
    return { emailAssistant, threadConfig, store };
}
/**
 * Extract values from state object regardless of type
 * Mirrors Python extract_values function
 */
export function extractValues(state) {
    if (state.values) {
        return state.values;
    }
    else {
        return state;
    }
}
/**
 * Run the initial stream and return collected messages
 * Mirrors Python run_initial_stream function
 */
export async function runInitialStream(emailAssistant, emailInput, threadConfig) {
    const messages = [];
    for await (const chunk of emailAssistant.stream({ "email_input": emailInput }, threadConfig)) {
        messages.push(chunk);
        // Break if we hit an interrupt
        if ('__interrupt__' in chunk) {
            break;
        }
    }
    return messages;
}
/**
 * Run stream with a command and return collected messages
 * Mirrors Python run_stream_with_command function
 */
export async function runStreamWithCommand(emailAssistant, command, threadConfig) {
    const messages = [];
    for await (const chunk of emailAssistant.stream(command, threadConfig)) {
        messages.push(chunk);
        // Break if we hit an interrupt
        if ('__interrupt__' in chunk) {
            break;
        }
    }
    return messages;
}
/**
 * Check if current module is compatible with test
 * Mirrors Python is_module_compatible function
 */
export function isModuleCompatible(requiredModules) {
    return requiredModules.includes(AGENT_MODULE || "");
}
/**
 * Evaluate response against criteria using LLM
 * Similar to what's done in Python test_response_criteria_evaluation
 */
export async function evaluateResponseCriteria(response, criteria) {
    const RESPONSE_CRITERIA_SYSTEM_PROMPT = `
  You are an expert email assistant evaluator. You will be given the content of an email response
  generated by an AI assistant and a specific criterion to evaluate it against.
  
  Your task is to determine if the email response meets the given criterion. Provide a clear yes/no grade
  and a detailed justification for your evaluation with specific examples from the response.
  `;
    const structuredLLM = global.criteriaEvalLLM?.withStructuredOutput(z.object({
        grade: z.boolean().describe("Does the response meet the provided criteria?"),
        justification: z.string().describe("The justification for the grade, including specific examples from the response.")
    }));
    if (!structuredLLM) {
        throw new Error("criteriaEvalLLM is not initialized");
    }
    return await structuredLLM.invoke([
        {
            type: "system",
            content: RESPONSE_CRITERIA_SYSTEM_PROMPT
        },
        {
            type: "user",
            content: `
      Response to evaluate:
      ${response}
      
      Criterion:
      ${criteria}
      
      Your evaluation:
      `
        }
    ]);
}
/**
 * Process stream with recursive handling of interrupts
 * Mirrors Python process_stream function in test_email_dataset_tool_calls
 */
export async function processStream(emailAssistant, inputData, threadConfig) {
    let result = {};
    // Stream and process all chunks
    for await (const chunk of emailAssistant.stream(inputData, threadConfig)) {
        // Update result with chunk data
        Object.assign(result, chunk);
        // If we hit an interrupt, handle it with accept and continue
        if ('__interrupt__' in chunk) {
            // Create accept command
            const resumeCommand = new Command({ resume: [{ "type": "accept", "args": "" }] });
            // Recursively process the accept command
            const interruptResult = await processStream(emailAssistant, resumeCommand, threadConfig);
            // Update result with interrupt processing result
            Object.assign(result, interruptResult);
            break;
        }
    }
    return result;
}
/**
 * Display memory content, similar to Python's display_memory_content
 */
export async function displayMemoryContent(store, namespace) {
    // Display current memory content for all namespaces
    console.log("\n======= CURRENT MEMORY CONTENT =======");
    if (namespace) {
        try {
            const memory = await store.get(namespace, "user_preferences");
            if (memory) {
                console.log(`\n--- ${namespace[1]} ---`);
                console.log({ "preferences": memory.value });
            }
            else {
                console.log(`\n--- ${namespace[1]} ---`);
                console.log("No memory found");
            }
        }
        catch (error) {
            console.log(`\n--- ${namespace[1]} ---`);
            console.log("Error retrieving memory");
        }
    }
    else {
        const namespaces = [
            ["email_assistant", "triage_preferences"],
            ["email_assistant", "response_preferences"],
            ["email_assistant", "cal_preferences"],
            ["email_assistant", "background"]
        ];
        for (const ns of namespaces) {
            try {
                const memory = await store.get(ns, "user_preferences");
                if (memory) {
                    console.log(`\n--- ${ns[1]} ---`);
                    console.log({ "preferences": memory.value });
                }
                else {
                    console.log(`\n--- ${ns[1]} ---`);
                    console.log("No memory found");
                }
            }
            catch (error) {
                console.log(`\n--- ${ns[1]} ---`);
                console.log("Error retrieving memory");
            }
            console.log("=======================================\n");
        }
    }
}
/**
 * Test email data, mirroring Python email_inputs
 */
export const testEmails = [
    {
        id: "test-email-1",
        thread_id: "thread-1",
        from_email: "Project Manager <pm@client.com>",
        to_email: "Lance Martin <lance@company.com>",
        subject: "Tax season let's schedule call",
        page_content: "Lance,\n\nIt's tax season again, and I wanted to schedule a call to discuss your tax planning strategies for this year. I have some suggestions that could potentially save you money.\n\nAre you available sometime next week? Tuesday or Thursday afternoon would work best for me, for about 45 minutes.\n\nRegards,\nProject Manager",
        send_time: new Date().toISOString()
    },
    {
        id: "test-email-2",
        thread_id: "thread-2",
        from_email: "marketing@newsletter.com",
        to_email: "lance@company.com",
        subject: "Weekly Newsletter",
        page_content: "Here's your weekly newsletter with the latest updates and offers.",
        send_time: new Date().toISOString()
    },
    {
        id: "test-email-3",
        thread_id: "thread-3",
        from_email: "manager@company.com",
        to_email: "lance@company.com",
        subject: "Urgent: Project Status",
        page_content: "Please provide an update on the project status by end of day.",
        send_time: new Date().toISOString()
    }
];
/**
 * Test criteria, mirroring Python response_criteria_list
 */
export const testCriteria = [
    "The response should acknowledge the meeting request and confirm availability for a specific time.",
    "The response should be concise and professional.",
    "The response should acknowledge the urgency and provide a specific timeframe for the update."
];
/**
 * Expected tool calls, mirroring Python expected_tool_calls
 */
export const expectedToolCalls = [
    ["schedule_meeting", "write_email"],
    [],
    ["write_email"]
];
