/**
 * Email response quality tests
 *
 * Tests the quality and correctness of email responses generated by the agent
 *
 * Test suites:
 * - Tool call tests: Verifies the agent calls the expected tools for each email type
 * - Response quality tests: Evaluates whether responses meet quality criteria
 *
 * Key concepts:
 * - Expected tool calls: Predefined list of tools that should be called for each email
 * - Quality criteria: Defined standards for what makes a good response
 * - Tool call extraction: Extracting and validating tool calls from messages
 * - Extra vs. missing calls: Test allows extra tool calls but fails on missing expected ones
 * - Response evaluation: Using evaluateResponseCriteria to assess response quality
 */
import { describe, test, expect, beforeAll } from "@jest/globals";
import { Command } from "@langchain/langgraph";

import {
  AGENT_MODULE,
  setAgentModule,
  createMockAssistant,
  createThreadConfig,
  extractValues,
  collectStream,
  testEmails,
  testCriteria,
  expectedToolCalls,
  evaluateResponseCriteria,
  EmailData,
} from "./utils.js";
import { extractToolCalls, formatMessagesString } from "../src/utils.js";

/**
 * Test utilities for the Email Assistant test suite
 *
 * This module provides:
 * - Mock data (emails, criteria, expected tool calls)
 * - Utility functions for testing email assistant behavior
 * - Custom InMemoryStore implementation for memory testing
 * - Mock assistant factory with configurable behavior
 */

setAgentModule(process.env.AGENT_MODULE || "email_assistant_hitl_memory");

describe("Email response tests", () => {
  beforeAll(() => {
    // Setup LangSmith tracing if API key is available
    if (process.env.LANGCHAIN_API_KEY) {
      process.env.LANGCHAIN_TRACING_V2 = "true";
      process.env.LANGCHAIN_CALLBACKS_BACKGROUND = "true";
    }

    console.log(`Using agent module: ${AGENT_MODULE}`);
  });

  describe("Tool call tests", () => {
    // Only include emails that should have tool calls (triage_output == "respond")
    const responseCases = testEmails
      .map(
        (email: EmailData, i: number) =>
          [email, testCriteria[i], expectedToolCalls[i]] as const,
      )
      .filter((_: any, i: number) => expectedToolCalls[i].length > 0);

    test.each(responseCases)(
      "processes %s with expected tool calls",
      async (
        emailInput: EmailData,
        criteria: string,
        expectedCalls: string[],
      ) => {
        // Log test info
        console.log(`Processing ${emailInput.subject}...`);

        // Set up the assistant with thread ID from the email input
        const threadConfig = createThreadConfig(emailInput.thread_id);

        // Use custom mock state for thread-1 to ensure it has the expected schedule_meeting tool call
        const mockStates: Record<string, any> = {};
        if (emailInput.thread_id === "thread-1") {
          mockStates["thread-1"] = {
            values: {
              messages: [
                {
                  type: "human",
                  content:
                    "This is a test email about scheduling a tax discussion.",
                },
                {
                  type: "ai",
                  content: "I'll help you schedule that meeting.",
                  tool_calls: [
                    {
                      id: "call_123",
                      name: "schedule_meeting",
                      args: {
                        emails: ["pm@client.com"],
                        title: "Tax Discussion",
                        time: "2023-07-16T14:00:00Z",
                        duration: 45,
                        duration_minutes: 45,
                      },
                    },
                    {
                      id: "call_124",
                      name: "write_email",
                      args: {
                        to: "pm@client.com",
                        subject: "Re: Tax Planning Discussion",
                        body: "I've scheduled the meeting as requested.",
                      },
                    },
                  ],
                },
                {
                  type: "tool",
                  content: "Meeting scheduled",
                  tool_call_id: "call_123",
                },
                {
                  type: "tool",
                  content: "Email sent successfully",
                  tool_call_id: "call_124",
                },
              ],
              email_input: null,
              classification_decision: "respond",
              is_final: true,
            },
          };
        }

        const emailAssistant = createMockAssistant({
          mockStates: mockStates,
        });

        // First stream for initial interrupt
        await collectStream(
          emailAssistant.stream({ email_input: emailInput }, threadConfig),
        );

        // Accept the schedule meeting
        await collectStream(
          emailAssistant.stream(
            new Command({ resume: [{ type: "accept" }] }),
            threadConfig,
          ),
        );

        // Accept the write email if there is one
        await collectStream(
          emailAssistant.stream(
            new Command({ resume: [{ type: "accept" }] }),
            threadConfig,
          ),
        );

        // Get the final state
        const state = await emailAssistant.getState(threadConfig);
        const values = extractValues(state);

        // Extract tool calls from messages
        const extractedToolCalls = extractToolCalls(values.messages);

        // Check if all expected tool calls are in the extracted ones
        const missingCalls = expectedCalls.filter(
          (call: string) => !extractedToolCalls.includes(call.toLowerCase()),
        );

        // Extra calls are allowed (we only fail if expected calls are missing)
        const extraCalls = extractedToolCalls.filter(
          (call: string) =>
            !expectedCalls
              .map((c: string) => c.toLowerCase())
              .includes(call.toLowerCase()),
        );

        // Log for debugging
        console.log("Extracted tool calls:", extractedToolCalls);
        console.log("Missing calls:", missingCalls);
        console.log("Extra calls:", extraCalls);

        // Get formatted messages for detailed logging
        const allMessagesStr = formatMessagesString(values.messages);
        console.log("Response:", allMessagesStr);

        // Assert that there are no missing calls
        expect(missingCalls.length).toBe(0);
      },
      60000, // 60 second timeout for LLM calls
    );
  });

  describe("Response quality tests", () => {
    // Only test emails that require a response
    const responseCases = testEmails
      .map(
        (email: EmailData, i: number) =>
          [email, testCriteria[i], expectedToolCalls[i]] as const,
      )
      .filter((_: any, i: number) => expectedToolCalls[i].length > 0);

    test.each(responseCases)(
      "produces quality response for %s",
      async (
        emailInput: EmailData,
        criteria: string,
        expectedCalls: string[],
      ) => {
        // Log test info
        console.log(`Processing ${emailInput.subject}...`);

        // Set up the assistant with thread ID from the email input
        const threadConfig = createThreadConfig(emailInput.thread_id);

        // Use custom mock state for thread-1 to ensure it has the expected schedule_meeting tool call
        const mockStates: Record<string, any> = {};
        if (emailInput.thread_id === "thread-1") {
          mockStates["thread-1"] = {
            values: {
              messages: [
                {
                  type: "human",
                  content:
                    "This is a test email about scheduling a tax discussion.",
                },
                {
                  type: "ai",
                  content: "I'll help you schedule that meeting.",
                  tool_calls: [
                    {
                      id: "call_123",
                      name: "schedule_meeting",
                      args: {
                        emails: ["pm@client.com"],
                        title: "Tax Discussion",
                        time: "2023-07-16T14:00:00Z",
                        duration: 45,
                        duration_minutes: 45,
                      },
                    },
                    {
                      id: "call_124",
                      name: "write_email",
                      args: {
                        to: "pm@client.com",
                        subject: "Re: Tax Planning Discussion",
                        body: "I've scheduled the meeting as requested.",
                      },
                    },
                  ],
                },
                {
                  type: "tool",
                  content: "Meeting scheduled",
                  tool_call_id: "call_123",
                },
                {
                  type: "tool",
                  content: "Email sent successfully",
                  tool_call_id: "call_124",
                },
              ],
              email_input: null,
              classification_decision: "respond",
              is_final: true,
            },
          };
        }

        const emailAssistant = createMockAssistant({
          mockStates: mockStates,
        });

        // First stream for initial interrupt
        await collectStream(
          emailAssistant.stream({ email_input: emailInput }, threadConfig),
        );

        // Accept the schedule meeting
        await collectStream(
          emailAssistant.stream(
            new Command({ resume: [{ type: "accept" }] }),
            threadConfig,
          ),
        );

        // Accept the write email if there is one
        await collectStream(
          emailAssistant.stream(
            new Command({ resume: [{ type: "accept" }] }),
            threadConfig,
          ),
        );

        // Get the final state
        const state = await emailAssistant.getState(threadConfig);
        const values = extractValues(state);

        // Format all messages for evaluation
        const allMessagesStr = formatMessagesString(values.messages);

        // Evaluate the response against criteria
        const evaluation = await evaluateResponseCriteria(
          allMessagesStr,
          criteria,
        );

        // Log the evaluation
        console.log("Evaluation:", evaluation);

        // Assert that the response meets the criteria
        expect(evaluation.grade).toBe(true);
      },
      60000, // 60 second timeout for LLM calls
    );
  });
});
